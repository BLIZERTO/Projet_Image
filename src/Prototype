import fr.unistra.pelican.ByteImage;
import fr.unistra.pelican.algorithms.io.ImageLoader;

import java.io.IOException;
import java.util.Arrays;


import fr.unistra.pelican.Image;
import fr.unistra.pelican.algorithms.visualisation.Viewer2D;

public class Test {


    public static void median(Image image) {
        /**
         * Cette fonction applique le filtre median sur l'image
         *
         * @param image l'image bruitée à traiter
         *
         */
        ByteImage new_image = new ByteImage(image.getXDim(), image.getYDim(), 1, 1, 1);

        for (int x = 1; x < image.getXDim() - 1; x++) {
            for (int y = 1; y < image.getYDim() - 1; y++) {
                // calcul de la mediane
                int[] arr = { //
                        image.getPixelXYBByte(x, y, 0),
                        image.getPixelXYBByte(x + 1, y + 1, 0),
                        image.getPixelXYBByte(x - 1, y - 1, 0),
                        image.getPixelXYBByte(x - 1, y, 0),
                        image.getPixelXYBByte(x, y - 1, 0),
                        image.getPixelXYBByte(x - 1, y + 1, 0),
                        image.getPixelXYBByte(x + 1, y - 1, 0),
                        image.getPixelXYBByte(x, y + 1, 0),
                        image.getPixelXYBByte(x + 1, y, 0)
                };

                System.out.println(arr);
                Arrays.sort(arr);
                int mediane = arr[arr.length / 2];
                new_image.setPixelXYBByte(x, y, 0, mediane);
            } // y for
        } // x for
        new_image.setColor(false); //si false => affichage de chaque canal, si true => affichage d'une image couleur
        Viewer2D.exec(new_image);
    } // median


    public static void main(String[] args) throws IOException {
        Image test = ImageLoader.exec("Z:\\Image\\maldive.jpg");
        median(test);
        double[][] histo = getHisto(test, 1);


        double[][] histoRouge = getHisto(test, 0);
        double[][] histoVert = getHisto(test, 1);
        double[][] histoBleu = getHisto(test, 2);

        double[][] nvBleu= discretisation(histoBleu,100);
        double[][] nvRouge= discretisation(histoRouge,10);
        double[][] nvVert= discretisation(histoVert,10);

        Histogram.plotHistogram(nvRouge[0], "rouge");
        Histogram.plotHistogram(nvVert[1], "vert");
        Histogram.plotHistogram(nvBleu[2], "bleu");

    }

    private static double[][] discretisation(double[][] histogram, int nbDiv) {

        int nvlValeur = histogram[0].length / nbDiv; //division de la taille de l'histogramme par un nombre donné en paramètres.
        double[][] nouvelHisto = new double[3][nvlValeur];

        for (int i = 0; i < nouvelHisto.length; i++) { //Ici on a 3 (RGB), on regarde 0-2
            for (int j = 0; j < nouvelHisto[0].length; j++) { //Ici on regarde la colonne

                double val = 0;
                for (int x = 0; x < nbDiv; x++) {

                    val += histogram[i][nbDiv * j + x];

                }
                nouvelHisto[i][j] = val / nbDiv;
            }
        }


        return nouvelHisto;
    }


    private static double[][] getHisto(Image image, int canal) {
        double histo[][] = new double[3][256];
        for (int i = 0; i < histo.length; i++) {
            for (int j = 0; j < histo.length; j++) {
                histo[i][j] = 0;
            }

        }
        for (int x = 0; x < image.getXDim(); x++) {
            for (int y = 0; y < image.getYDim(); y++) {
                for (int k = 0; k < image.getBDim(); k++) {

                    int val = image.getPixelXYBByte(x, y, k);
                    if (k == 0) {
                        histo[k][val] += 1;
                    } else if (k == 1) {
                        histo[k][val] += 1;
                    } else if (k == 2) {
                        histo[k][val] += 1;

                    }

                }
            }
        }
        return histo;
    }
}
