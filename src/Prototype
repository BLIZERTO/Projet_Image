import fr.unistra.pelican.ByteImage;
import fr.unistra.pelican.algorithms.io.ImageLoader;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;


import fr.unistra.pelican.Image;
import fr.unistra.pelican.algorithms.visualisation.Viewer2D;

import javax.imageio.ImageIO;

public class PartieI {

    public static void main(String[] args) throws IOException {
       /* Image image = ImageLoader.exec("C:\\Users\\elodi\\OneDrive\\Documents\\Dut informatique 2\\Image\\Image\\Images\\lenaB.png");
        Image median = median(image);
        CanalHisto nvlImage = new CanalHisto(image);
        nvlImage.getCanalHisto(image);
        System.out.println(nvlImage.getCRouge());
        System.out.println(nvlImage.getCVert());
        System.out.println(nvlImage.getCBleu());
        double[] nvBleu = discretisation(nvlImage.getCBleu());
        double[] nvVert = discretisation(nvlImage.getCVert());
        double[] nvRouge = discretisation(nvlImage.getCRouge());

        nvBleu=normalisation(nvBleu);
        HistogramTools.plotHistogram(nvBleu, "bleu");
        median.setColor(true);
        Viewer2D.exec(median);*/
        Recherche("C:\\Users\\elodi\\OneDrive\\Documents\\Dut informatique 2\\Image\\Image\\Test");
    }
    public static Image median(Image image){
        /**
         * Cette fonction appelle la fonction medianCouleur ou medianGris en fonction du nombres de canaux dans une image
         */
        if (image.getBDim()>2){
            return medianCouleur(image);}
        else {
            return medianGris(image);
        }

    }
    public static Image medianCouleur(Image imageDepart) {
        /**
         * Cette fonction applique le filtre median sur l'imageDepart qui est une image en couleur.
         *
         * @param imageDepart l'imageDepart est l'image bruité à réparer
         *
         */
        ByteImage new_image = new ByteImage(imageDepart.getXDim(), imageDepart.getYDim(), 1, 1, 3);

        for (int x = 1; x < imageDepart.getXDim() - 1; x++) {
            for (int y = 1; y < imageDepart.getYDim() - 1; y++) {


                           int[] TabCanal0 = { //
                                    imageDepart.getPixelXYBByte(x, y, 0),
                                    imageDepart.getPixelXYBByte(x + 1, y + 1, 0),
                                    imageDepart.getPixelXYBByte(x - 1, y - 1, 0),
                                    imageDepart.getPixelXYBByte(x - 1, y, 0),
                                    imageDepart.getPixelXYBByte(x, y - 1, 0),
                                    imageDepart.getPixelXYBByte(x - 1, y + 1, 0),
                                    imageDepart.getPixelXYBByte(x + 1, y - 1, 0),
                                    imageDepart.getPixelXYBByte(x, y + 1, 0),
                                    imageDepart.getPixelXYBByte(x + 1, y, 0)};


                            int[] TabCanal1 = { //
                                    imageDepart.getPixelXYBByte(x, y, 1),
                                    imageDepart.getPixelXYBByte(x + 1, y + 1, 1),
                                    imageDepart.getPixelXYBByte(x - 1, y - 1, 1),
                                    imageDepart.getPixelXYBByte(x - 1, y, 1),
                                    imageDepart.getPixelXYBByte(x, y - 1, 1),
                                    imageDepart.getPixelXYBByte(x - 1, y + 1, 1),
                                    imageDepart.getPixelXYBByte(x + 1, y - 1, 1),
                                    imageDepart.getPixelXYBByte(x, y + 1, 1),
                                    imageDepart.getPixelXYBByte(x + 1, y, 1)
                            };
                            int[] TabCanal2 = { //
                                    imageDepart.getPixelXYBByte(x, y, 2),
                                    imageDepart.getPixelXYBByte(x + 1, y + 1, 2),
                                    imageDepart.getPixelXYBByte(x - 1, y - 1, 2),
                                    imageDepart.getPixelXYBByte(x - 1, y, 2),
                                    imageDepart.getPixelXYBByte(x, y - 1, 2),
                                    imageDepart.getPixelXYBByte(x - 1, y + 1, 2),
                                    imageDepart.getPixelXYBByte(x + 1, y - 1, 2),
                                    imageDepart.getPixelXYBByte(x, y + 1, 2),
                                    imageDepart.getPixelXYBByte(x + 1, y, 2)
                            };

                            Arrays.sort(TabCanal0);
                            Arrays.sort(TabCanal1);
                            Arrays.sort(TabCanal2);
                            int mediane1 = TabCanal0[TabCanal0.length / 2];
                            int mediane2 = TabCanal1[TabCanal1.length / 2];
                            int mediane3 = TabCanal2[TabCanal2.length / 2];
                            new_image.setPixelXYBByte(x, y, 0, mediane1);
                            new_image.setPixelXYBByte(x, y, 1, mediane2);
                            new_image.setPixelXYBByte(x, y, 2, mediane3);
                        }
                    }
                
                    

                return new_image;
            }

    public static Image medianGris(Image imageDepart) {
        /**
         * Cette fonction applique le filtre median sur l'imageDepart qui est une image de couleur grise.
         *
         * @param imageDepart l'imageDepart bruitée à traiter
         *
         */
        ByteImage new_image = new ByteImage(imageDepart.getXDim(), imageDepart.getYDim(), 1, 1, 1);

        for (int x = 1; x < imageDepart.getXDim() - 1; x++) {
            for (int y = 1; y < imageDepart.getYDim() - 1; y++) {
                int[] array1 = {
                        imageDepart.getPixelXYBByte(x, y, 0),
                        imageDepart.getPixelXYBByte(x + 1, y + 1, 0),
                        imageDepart.getPixelXYBByte(x - 1, y - 1, 0),
                        imageDepart.getPixelXYBByte(x - 1, y, 0),
                        imageDepart.getPixelXYBByte(x, y - 1, 0),
                        imageDepart.getPixelXYBByte(x - 1, y + 1, 0),
                        imageDepart.getPixelXYBByte(x + 1, y - 1, 0),
                        imageDepart.getPixelXYBByte(x, y + 1, 0),
                        imageDepart.getPixelXYBByte(x + 1, y, 0)};

                Arrays.sort(array1);

                int mediane1 = array1[array1.length / 2];

                new_image.setPixelXYBByte(x, y, 0, mediane1);

            }
        }

        return new_image;
    }


    private static File[] Recherche(String fichier) throws IOException {


          File folder = new File(fichier);
        File[] listeImage= folder.listFiles();
        for (int i=0; i <listeImage.length; i++) {

               Image image= median(ImageLoader.exec(String.valueOf(listeImage[i])));
                System.out.println(listeImage[i].getName());
            image.setColor(true);
            Viewer2D.exec(image);
                /**/
        }
        return listeImage;
    }

    private static double[] discretisation(double[] histogram) {

        /*int nvlValeur = histogram.length / nbDiv;*/ //division de la taille de l'histogramme par un nombre donné en paramètres.
        double[] nouvelHisto = new double[histogram.length / 2];

        for (int i = 0; i < nouvelHisto.length - 1; i = i + 2) {

            nouvelHisto[i] = histogram[i] + histogram[i + 1];  //
        }

        return nouvelHisto;
    }

    private static double[] normalisation(double[] histogram) {
        double pourcentage=0;
        double[] histo = new double[histogram.length];
        int totalPixels = 0;


        for (int i = 0 ; i < histogram.length;i++){
            totalPixels += histogram[i];
            histo[i] = (histogram[i] * 100) / totalPixels;
             pourcentage += histo[i];
        }
        System.out.println(totalPixels);

        return histo;
    }


    public static double[] getHisto(Image image, int canal) {
        double histogramme[] = new double[256];
        for (int i = 0; i < histogramme.length; i++) {
            histogramme[i] = 0;
        }
        for (int x = 0; x < image.getXDim(); x++) {
            for (int y = 0; y < image.getYDim(); y++) {
                histogramme[image.getPixelXYBByte(x, y, canal)] += 1;
            }
        }

        return histogramme;
    }


    public static void ImageSimilaire(){

    }
}

